name: a1to5x

on:
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(aria2c,curl,axel,wget)'
         required: true
         default: 'aria2c'
       output:
         description: 'Output(wget=O)'
         required: true
         default: 'o'
       filename:
         description: 'ROM NAME'
         required: true
         default: 'xx.zip'
       filelink:
         description: 'ROM LINK'
         required: true
       release:
         description: 'Upload to Release'
         required: true
         default: 'true'

jobs:
  a1to5x:
    runs-on: ubuntu-18.04
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel cpio file
          pip3 install protobuf
          pip install brotli

      - id: var
        name: Download
        run: |
          echo "Download"
          NAME="${{ github.event.inputs.filename }}"
          if [[ ! -z "$(echo ${NAME} | grep ".zip")" ]]; then
              echo "::set-output name=filename::${NAME%.*}"
              filename="${NAME%.*}"
          fi
          ${{ github.event.inputs.mode }} ${{ github.event.inputs.filelink }} -${{ github.event.inputs.output }} "${filename}.zip"
          ls -al

      - name: Payload Extracting
        run: |
          echo "Payload Extracting"
          unzip ${{ steps.var.outputs.filename }}.zip payload.bin
          rm -rf ${{ steps.var.outputs.filename }}.zip
          python3 update-payload-extractor/extract.py payload.bin --output_dir output/
          rm -rf payload.bin
          ls

      - name: Fstab Patching
        run: |
            echo "system"
            mkdir system/
            sudo mount output/system.img system/
            cat system/system/vendor/etc/fstab.qcom
            fstab="system/system/vendor/etc/fstab.qcom"
            sudo sed -i 's/,slotselect//g' $fstab
            sudo sed -i 's/,verify//g' $fstab
            sudo sed -i 's/,avb//g' $fstab
            sudo sed -i 's/forceencrypt/encryptable/g' $fstab
            sudo sed -i 's/fileencryption=ice/encryptable=footer/g' $fstab
            sudo sed -i '/mnt_point/{n;/system/d;}' $fstab
            sudo sed -i '/mnt_point/a\/dev/block/bootdevice/by-name/system		/system			ext4	ro								wait,recoveryonly' $fstab
            sudo sed -i '/mnt_point/G' $fstab
            sudo sed -i '/mnt_point/a\/dev/block/bootdevice/by-name/recovery		/recovery		emmc	defaults							defaults' $fstab
            sudo sed -i '/mnt_point/a\\n/dev/block/bootdevice/by-name/boot		/boot			emmc	defaults							defaults' $fstab
            sudo sed -i '/persist/i\/dev/block/bootdevice/by-name/cache		/cache			f2fs	nosuid,nodev,noatime,inline_xattr,flush_merge,data_flush	wait,formattable,check' $fstab
            sudo sed -i '/cache/a\\n/dev/block/bootdevice/by-name/cache		/cache			ext4	nosuid,nodev,noatime						wait,formattable,check' $fstab
            cat system/system/vendor/etc/fstab.qcom
            sudo cp system/system/vendor/etc/fstab.qcom output/fstab.qcom
            sudo umount system
            sudo rm -rf system

      - name: Patching boot
        run: |
          echo "Patching boot"
          mv output/boot.img mkbootimg/
          cd mkbootimg
          ./mkboot boot.img boot
          rm boot.img
          cd boot
          ls
          mv kernel image.gz-dtb
          ../split-appended-dtb image.gz-dtb
          rm image.gz-dtb
          ls
          for i in `find *.dtb`; do
              dts=${i%.*}.dts
              dtc -q -I dtb -O dts -o $dts $i
              rm -rf $i
              if [ `grep -c "fstab" $dts` -ne '0' ];then
                  sed -i '/,slotselect/{n;s/disable/ok/;}' $dts
                  sed -i 's/,avb//g' $dts
                  sed -i 's/,slotselect//g' $dts
              fi
              cp $dts ../../output/
              dtc -q -I dts -O dtb -o $i $dts
              rm -rf $dts
          done
          cat kernel *.dtb > image.gz-dtb
          rm -f *.dtb
          rm -f kernel
          mv image.gz-dtb kernel
          ls
          cd ..
          ./mkboot boot boot.img
          cd ..
          mv mkbootimg/boot.img ./
          ./magiskboot unpack -h boot.img
          cp -f cpio/ramdisk-sar.cpio ramdisk.cpio
          sed -i 's/veritykeyid=id:\w*//g' header
          cp header output/
          ./magiskboot dtb kernel_dtb print -f
          mv boot.img output/boot.img
          ls -al
          
      - name: Packing
        run: |
          mv output/boot.img template/boot.img
          mv output/system.img template/system.img
          cd template
          ls -al
          echo "--------------------------------------------"
          zip -q -r -9 ${{ steps.var.outputs.filename }}.zip *
          cd ..
          mv template/${{ steps.var.outputs.filename }}.zip ./
          ls -al

      - name: Upload to Artifact
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: |
            output
          retention-days: 7

      - name: Upload to WeTransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          wetrans=$(./transfer wet -s -p 16 --no-progress ${{ steps.var.outputs.filename }}.zip)
          wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
          echo "WeTransfer: $wetrans"


      - name: Upload to Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.var.outputs.filename }}.zip
          name: ${{ steps.var.outputs.filename }}
          tag_name: ${{ github.run_id }}
          body: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}

